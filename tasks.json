[
  {
    "title": "Project Setup and Database Infrastructure",
    "description": "Set up the foundational project structure with Next.js, TypeScript, Tailwind CSS, and PostgreSQL database with Drizzle ORM. Configure development environment and create database schema for expenses, incomes, and assets.",
    "details": "Initialize Next.js project with TypeScript and Tailwind CSS. Install and configure Shadcn UI components. Set up Docker Compose for local PostgreSQL development. Configure Drizzle ORM with schema definitions for users, businesses, expenses, incomes, and assets tables. Create migration scripts and seed data. Set up ESLint and Prettier for code quality. Configure environment variables for database connection and OpenAI API. Implement basic project structure with proper folder organization following Next.js App Router conventions.",
    "status": "pending",
    "test_strategy": "Verify project builds successfully, database connections work, migrations run without errors, and all development tools are properly configured. Test database CRUD operations with Drizzle ORM.",
    "priority": "high",
    "ordinal": 1,
    "task_group_id": "16f1d519-f313-45ab-9890-4f6a0dff3815",
    "parent_task_id": null,
    "ai_result": null,
    "id": "f9709e11-9d55-41e0-a611-56c34181c335",
    "created_at": "2025-10-02T11:33:22.937529Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "User Authentication and Business Setup",
    "description": "Implement user authentication system with sign-up/sign-in functionality and business initialization flow including business name, fiscal start date, and currency selection.",
    "details": "Create authentication pages using Shadcn UI components with email/password forms. Implement secure password hashing using bcrypt or Argon2. Set up session management and protected routes. Create business setup flow with form validation for business name, fiscal start date, and currency selection. Implement middleware for route protection and user session handling. Add CSRF protection and input sanitization. Create user and business database models with proper relationships. Implement server-side validation for all user inputs.",
    "status": "pending",
    "test_strategy": "Test user registration, login, logout flows. Verify password security, session persistence, and protected route access. Test business setup form validation and data persistence. Verify CSRF protection and input sanitization work correctly.",
    "priority": "high",
    "ordinal": 2,
    "task_group_id": "16f1d519-f313-45ab-9890-4f6a0dff3815",
    "parent_task_id": null,
    "ai_result": null,
    "id": "14820705-5e2f-4338-9730-2328cbbfdebf",
    "created_at": "2025-10-02T11:33:22.937529Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Chat Interface and AI Integration",
    "description": "Build the chat-style interface for natural language transaction entry and implement GPT-4.1 integration for parsing user inputs, asking follow-up questions, and providing AI-driven insights.",
    "details": "Create responsive chat interface using Shadcn UI components with message bubbles, input field, and typing indicators. Implement real-time chat functionality with proper state management. Integrate OpenAI GPT-4.1 API for natural language processing of financial transactions. Create prompt engineering for parsing expenses, income, and asset entries into structured data (date, category, vendor/client, payment method, amount, notes). Implement AI follow-up question logic for missing transaction details. Add conversation context management and message history. Implement retry logic and error handling for OpenAI API rate limits. Create AI insight features for cash-flow forecasts, budget recommendations, anomaly detection, and tax summaries.",
    "status": "pending",
    "test_strategy": "Test chat interface responsiveness and user experience. Verify AI parsing accuracy with various natural language inputs. Test follow-up question flows and conversation context. Verify API error handling and rate limit management. Test AI insight generation with sample data.",
    "priority": "high",
    "ordinal": 3,
    "task_group_id": "16f1d519-f313-45ab-9890-4f6a0dff3815",
    "parent_task_id": null,
    "ai_result": null,
    "id": "24278e59-dae5-4c55-a5e8-f500cdf6cd5c",
    "created_at": "2025-10-02T11:33:22.937529Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Dashboard and Data Visualization",
    "description": "Create interactive dashboard with line charts, bar charts, and tabular views for financial data visualization. Implement filtering, sorting, and responsive design with green color theme.",
    "details": "Build dashboard layout using Shadcn UI components with green color theme. Implement interactive line charts for income vs expenses trends using a charting library (Chart.js or Recharts). Create bar charts for category breakdowns and spending patterns. Build tabular views with sorting, filtering, and pagination capabilities. Add date range picker for filtering data by time periods. Implement hover tooltips and chart interactions. Create responsive design that works on desktop and tablet devices. Add loading states and error handling for chart rendering. Implement client-side caching for improved performance. Add database indexes on date and category fields for query optimization.",
    "status": "pending",
    "test_strategy": "Test chart rendering performance with various data sizes. Verify interactive features like filtering, sorting, and date range selection. Test responsive design across different screen sizes. Verify data accuracy between charts and database. Test loading states and error handling scenarios.",
    "priority": "medium",
    "ordinal": 4,
    "task_group_id": "16f1d519-f313-45ab-9890-4f6a0dff3815",
    "parent_task_id": null,
    "ai_result": null,
    "id": "3145a187-1b4c-40bb-be71-c3f19b67bcc9",
    "created_at": "2025-10-02T11:33:22.937529Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  },
  {
    "title": "Excel Export and Data Management",
    "description": "Implement Excel export functionality to generate .xlsx files with separate sheets for expenses, incomes, and assets, including pivot table summaries and proper formatting.",
    "details": "Install and configure Excel generation library (xlsx or exceljs). Create export service that generates .xlsx files with separate worksheets for expenses, incomes, and assets. Implement proper Excel formatting with headers, data types, and styling. Add pivot table summaries for category breakdowns and monthly totals. Ensure exported data matches dashboard filters and date ranges. Implement file download functionality with proper MIME types and headers. Add progress indicators for large exports. Create data validation and sanitization for Excel output. Implement GDPR-compliant data export functionality for user data deletion requests. Add error handling for export failures and file size limitations.",
    "status": "pending",
    "test_strategy": "Test Excel file generation with various data sets and filters. Verify file format compatibility with Excel and other spreadsheet applications. Test pivot table functionality and data accuracy. Verify download functionality across different browsers. Test large dataset exports and performance. Verify GDPR compliance features work correctly.",
    "priority": "medium",
    "ordinal": 5,
    "task_group_id": "16f1d519-f313-45ab-9890-4f6a0dff3815",
    "parent_task_id": null,
    "ai_result": null,
    "id": "0d2c0ccd-14f1-4dae-8c7f-d36c95f1047a",
    "created_at": "2025-10-02T11:33:22.937529Z",
    "user_id": "user_2qaB6nlVH3R9QXhQZpt1nmVDymN",
    "subtasks": []
  }
]